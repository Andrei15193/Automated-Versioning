name: Build

on:
  push:
    branches:
      - '*'

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      project1_release: ${{ steps.releases.outputs.project1_release }}
      project1_release_name: ${{ steps.releases.outputs.project1_release_name }}
      project1_release_next_version: ${{ steps.releases.outputs.project1_release_next_version }}
      project1_release_next_tag: ${{ steps.releases.outputs.project1_release_next_tag }}
      project1_release_latest_release_ref: ${{ steps.releases.outputs.project1_release_latest_release_ref }}

      project2_release: ${{ steps.releases.outputs.project2_release }}
      project2_release_name: ${{ steps.releases.outputs.project2_release_name }}
      project2_release_next_version: ${{ steps.releases.outputs.project2_release_next_version }}
      project2_release_next_tag: ${{ steps.releases.outputs.project2_release_next_tag }}
      project2_release_latest_release_ref: ${{ steps.releases.outputs.project2_release_latest_release_ref }}

      project3_release: ${{ steps.releases.outputs.project3_release }}
      project3_release_name: ${{ steps.releases.outputs.project3_release_name }}
      project3_release_next_version: ${{ steps.releases.outputs.project3_release_next_version }}
      project3_release_next_tag: ${{ steps.releases.outputs.project3_release_next_tag }}
      project3_release_latest_release_ref: ${{ steps.releases.outputs.project3_release_latest_release_ref }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout Sources
        with:
          fetch-depth: 0

      - name: Build
        run: |
          Write-Output "Pretend that this is an actual build, you know, for fun :)"

      - name: Determine Releases
        id: releases
        run: |
          Write-Output "If the build and testing and all the good stuff runs without a problem, determine which releases need to be created"

          function Get-ReleaseInformation([string]$name, [string]$prefix, [string]$baseVersion) {
            $tagFilter = "^$(([regex]::Escape("$prefix-$baseVersion")))\.\d+$"
            $latestIncrement = git tag --list "$prefix-$baseVersion.*" `
              | Where-Object { $_ -match $tagFilter } `
              | ForEach-Object {
                $_ -split "\." `
                | Select-Object -Last 1 `
                | ForEach-Object { $_ -as [int] }
              } `
              | Sort-Object -Descending `
              | Select-Object -First 1

            $nextVersion = if ($latestIncrement -eq $null) { "$baseVersion.0" } else { "$baseVersion.$($latestIncrement + 1)" }
            $latestReleaseRef = if ($latestIncrement -eq $null) { $null | git hash-object -t tree --stdin } else { "$prefix-$baseVersion.$latestIncrement" }

            return @{
              Name = $name;
              Prefix = $prefix;
              NextVersion = $nextVersion;
              NextTag = "$prefix-$nextVersion";
              LatestReleaseRef = $latestReleaseRef
            }
          }

          function Set-CreateProjectReleaseOutput($releaseInformation) {
            Write-Output "::set-output name=$($releaseInformation.Prefix)_release::yes"
            Write-Output "::set-output name=$($releaseInformation.Prefix)_release_name::$($releaseInformation.Name)"
            Write-Output "::set-output name=$($releaseInformation.Prefix)_release_next_version::$($releaseInformation.NextVersion)"
            Write-Output "::set-output name=$($releaseInformation.Prefix)_release_next_tag::$($releaseInformation.NextTag)"
            Write-Output "::set-output name=$($releaseInformation.Prefix)_release_latest_release_ref::$($releaseInformation.LatestReleaseRef)"
          }

          $project1ReleaseInformation = Get-ReleaseInformation "Project 1" "project1" (Get-Content 'Project 1/version.txt')
          $project2ReleaseInformation = Get-ReleaseInformation "Project 2" "project2" (Get-Content 'Project 2/version.txt')
          $project3ReleaseInformation = Get-ReleaseInformation "Project 3" "project3" (Get-Content 'Project 3/version.txt')

          if (git diff $project1ReleaseInformation.LatestReleaseRef -- 'Project 1/') {
            Set-CreateProjectReleaseOutput $project1ReleaseInformation
            Set-CreateProjectReleaseOutput $project2ReleaseInformation
            Set-CreateProjectReleaseOutput $project3ReleaseInformation
          }
          else {
            if (git diff $project2ReleaseInformation.LatestReleaseRef -- 'Project 2/') {
              Write-Output (Set-CreateProjectReleaseOutput $project2ReleaseInformation)
            }
            if (git diff $project3ReleaseInformation.LatestReleaseRef -- 'Project 3/') {
              Write-Output (Set-CreateProjectReleaseOutput $project3ReleaseInformation)
            }
          }

  create-release-project-1:
    name: Create Project 1 Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.project1_release == 'yes'
    steps:
      - uses: actions/checkout@v3
        name: Checkout Sources

      - name: Create Project 1 Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          Write-Output "I should probably create a release for Project 1, next version: ${{ needs.build.outputs.project1_release_next_version }}, next tag: ${{ needs.build.outputs.project1_release_next_tag }}, previous release ref: ${{ needs.build.outputs.project1_release_latest_release_ref }}"

          git tag ${{ needs.build.outputs.project1_release_next_tag }} --annotate --message "Release Notes for ${{ needs.build.outputs.project1_release_next_version }}"
          git push origin --tags

          gh release create ${{ needs.build.outputs.project1_release_next_tag }} `
            --title "${{ needs.build.outputs.project1_release_name }} ${{ needs.build.outputs.project1_release_next_version }}" `
            --notes "Release Notes for ${{ needs.build.outputs.project1_release_next_version }}" `
            --target "${{ github.event.head_commit.id }}"

  create-release-project-2:
    name: Create Project 2 Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.project2_release == 'yes'
    steps:
      - uses: actions/checkout@v3
        name: Checkout Sources

      - name: Create Project 2 Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          Write-Output "I should probably create a release for Project 2, next version: ${{ needs.build.outputs.project2_release_next_version }}, next tag: ${{ needs.build.outputs.project2_release_next_tag }}, previous release ref: ${{ needs.build.outputs.project2_release_latest_release_ref }}"

          gh release create ${{ needs.build.outputs.project2_release_next_tag }} `
            --title "${{ needs.build.outputs.project2_release_name }} ${{ needs.build.outputs.project2_release_next_version }}" `
            --notes "Release Notes for ${{ needs.build.outputs.project2_release_next_version }}" `
            --target "${{ github.event.head_commit.id }}"

  create-release-project-3:
    name: Create Project 3 Release
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.project3_release == 'yes'
    steps:
      - uses: actions/checkout@v3
        name: Checkout Sources

      - name: Create Project 3 Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          Write-Output "I should probably create a release for Project 3, next version: ${{ needs.build.outputs.project3_release_next_version }}, next tag: ${{ needs.build.outputs.project3_release_next_tag }}, previous release ref: ${{ needs.build.outputs.project3_release_latest_release_ref }}"

          gh release create ${{ needs.build.outputs.project3_release_next_tag }} `
            --title "${{ needs.build.outputs.project3_release_name }} ${{ needs.build.outputs.project3_release_next_version }}" `
            --notes "Release Notes for ${{ needs.build.outputs.project3_release_next_version }}" `
            --target "${{ github.event.head_commit.id }}"